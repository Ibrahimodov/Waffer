import{h as C,i as x,j as B,k as M,l as G,m as D,o as k}from"./chunk-PTPPGXS5.js";import{a as R,e as F,f as j}from"./chunk-APXZM46B.js";import{getMultipartBoundary as K,parseMultipartStream as J}from"@mjackson/multipart-parser";import{relative as w}from"path/posix";import{fileURLToPath as v}from"url";import L from"openapi-fetch";import{z as U}from"zod";function A(p,m,l={}){return L({baseUrl:p,headers:{Authorization:`Bearer ${m}`,...l}})}var $=U.object({message:U.string()});function s(p,m){if("error"in p){if(p.response.status===401)throw new Error("Unauthorized. Please provide a valid access token to the MCP server via the --access-token flag or SUPABASE_ACCESS_TOKEN.");let{data:l}=$.safeParse(p.error);throw l?new Error(l.message):new Error(m)}}var H="ABCDEFGHIJKLMNOPQRSTUVWXYZ",N="abcdefghijklmnopqrstuvwxyz",I="0123456789",W="!@#$%^&*()_+~`|}{[]:;?><,./-=",q=({length:p=10,numbers:m=!1,symbols:l=!1,uppercase:y=!0,lowercase:r=!0}={})=>{let d="";if(y&&(d+=H),r&&(d+=N),m&&(d+=I),l&&(d+=W),d.length===0)throw new Error("at least one character set must be selected");let O=new Uint32Array(p);crypto.getRandomValues(O);let E="";for(let b=0;b<p;b++){let S=O[b]%d.length;E+=d.charAt(S)}return E};var{version:V}=R;function le(p){let{accessToken:m,apiUrl:l}=p,y=l??"https://api.supabase.com",r=A(y,m),d={async listOrganizations(){let t=await r.GET("/v1/organizations");return s(t,"Failed to fetch organizations"),t.data},async getOrganization(t){let e=await r.GET("/v1/organizations/{slug}",{params:{path:{slug:t}}});return s(e,"Failed to fetch organization"),e.data},async listProjects(){let t=await r.GET("/v1/projects");return s(t,"Failed to fetch projects"),t.data},async getProject(t){let e=await r.GET("/v1/projects/{ref}",{params:{path:{ref:t}}});return s(e,"Failed to fetch project"),e.data},async createProject(t){let{name:e,organization_id:a,region:n,db_pass:o}=C.parse(t),i=await r.POST("/v1/projects",{body:{name:e,region:n,organization_id:a,db_pass:o??q({length:16,numbers:!0,uppercase:!0,lowercase:!0})}});return s(i,"Failed to create project"),i.data},async pauseProject(t){let e=await r.POST("/v1/projects/{ref}/pause",{params:{path:{ref:t}}});s(e,"Failed to pause project")},async restoreProject(t){let e=await r.POST("/v1/projects/{ref}/restore",{params:{path:{ref:t}}});s(e,"Failed to restore project")}},O={async executeSql(t,e){let{query:a,read_only:n}=G.parse(e),o=await r.POST("/v1/projects/{ref}/database/query",{params:{path:{ref:t}},body:{query:a,read_only:n}});return s(o,"Failed to execute SQL query"),o.data},async listMigrations(t){let e=await r.GET("/v1/projects/{ref}/database/migrations",{params:{path:{ref:t}}});return s(e,"Failed to fetch migrations"),e.data},async applyMigration(t,e){let{name:a,query:n}=D.parse(e),o=await r.POST("/v1/projects/{ref}/database/migrations",{params:{path:{ref:t}},body:{name:a,query:n}});s(o,"Failed to apply migration")}},E={async getLogs(t,e){let{sql:a,iso_timestamp_start:n,iso_timestamp_end:o}=k.parse(e),i=await r.GET("/v1/projects/{ref}/analytics/endpoints/logs.all",{params:{path:{ref:t},query:{sql:a,iso_timestamp_start:n,iso_timestamp_end:o}}});return s(i,"Failed to fetch logs"),i.data},async getSecurityAdvisors(t){let e=await r.GET("/v1/projects/{ref}/advisors/security",{params:{path:{ref:t}}});return s(e,"Failed to fetch security advisors"),e.data},async getPerformanceAdvisors(t){let e=await r.GET("/v1/projects/{ref}/advisors/performance",{params:{path:{ref:t}}});return s(e,"Failed to fetch performance advisors"),e.data}},b={async getProjectUrl(t){let e=new URL(y);return`https://${t}.${Q(e.hostname)}`},async getAnonKey(t){let e=await r.GET("/v1/projects/{ref}/api-keys",{params:{path:{ref:t},query:{reveal:!1}}});s(e,"Failed to fetch API keys");let a=e.data?.find(n=>n.name==="anon");if(!a?.api_key)throw new Error("Anonymous key not found");return a.api_key},async generateTypescriptTypes(t){let e=await r.GET("/v1/projects/{ref}/types/typescript",{params:{path:{ref:t}}});return s(e,"Failed to fetch TypeScript types"),e.data}},S={async listEdgeFunctions(t){let e=await r.GET("/v1/projects/{ref}/functions",{params:{path:{ref:t}}});return s(e,"Failed to fetch Edge Functions"),e.data.map(a=>{let n=F(t,a.id,a.version),o=j(n),i=a.entrypoint_path?w(o,v(a.entrypoint_path,{windows:!1})):void 0,u=a.import_map_path?w(o,v(a.import_map_path,{windows:!1})):void 0;return{...a,entrypoint_path:i,import_map_path:u}})},async getEdgeFunction(t,e){let a=await r.GET("/v1/projects/{ref}/functions/{function_slug}",{params:{path:{ref:t,function_slug:e}}});if(a.error)throw a.error;s(a,"Failed to fetch Edge Function");let n=a.data,o=F(t,n.id,n.version),i=j(o),u=n.entrypoint_path?w(i,v(n.entrypoint_path,{windows:!1})):void 0,T=n.import_map_path?w(i,v(n.import_map_path,{windows:!1})):void 0,f=await r.GET("/v1/projects/{ref}/functions/{function_slug}/body",{params:{path:{ref:t,function_slug:e}},headers:{Accept:"multipart/form-data"},parseAs:"stream"});s(f,"Failed to fetch Edge Function files");let c=f.response.headers.get("content-type");if(!c||!c.startsWith("multipart/form-data"))throw new Error(`Unexpected content type: ${c}. Expected multipart/form-data.`);let h=K(c);if(!h)throw new Error("No multipart boundary found in response headers");if(!f.data)throw new Error("No data received from Edge Function body");let _=[],P=J(f.data,{boundary:h});for await(let g of P)g.isFile&&g.filename&&_.push({name:w(i,g.filename),content:g.text});return{...n,entrypoint_path:u,import_map_path:T,files:_}},async deployEdgeFunction(t,e){let{name:a,entrypoint_path:n,import_map_path:o,files:i}=M.parse(e),u;try{u=await S.getEdgeFunction(t,a)}catch{}let T=i.find(c=>["deno.json","import_map.json"].includes(c.name));o??=u?.import_map_path??T?.name;let f=await r.POST("/v1/projects/{ref}/functions/deploy",{params:{path:{ref:t},query:{slug:a}},body:{metadata:{name:a,entrypoint_path:n,import_map_path:o},file:i},bodySerializer(c){let h=new FormData,_=new Blob([JSON.stringify(c.metadata)],{type:"application/json"});return h.append("metadata",_),c.file?.forEach(P=>{let g=P,z=new Blob([g.content],{type:"application/typescript"});h.append("file",z,g.name)}),h}});return s(f,"Failed to deploy Edge Function"),f.data}};return{async init(t){let{clientInfo:e}=t;if(!e)throw new Error("Client info is required");r=A(y,m,{"User-Agent":`supabase-mcp/${V} (${e.name}/${e.version})`})},account:d,database:O,debugging:E,development:b,functions:S,branching:{async listBranches(t){let e=await r.GET("/v1/projects/{ref}/branches",{params:{path:{ref:t}}});return e.response.status===422?[]:(s(e,"Failed to list branches"),e.data)},async createBranch(t,e){let{name:a}=x.parse(e),n=await r.POST("/v1/projects/{ref}/branches",{params:{path:{ref:t}},body:{branch_name:a}});return s(n,"Failed to create branch"),n.data},async deleteBranch(t){let e=await r.DELETE("/v1/branches/{branch_id}",{params:{path:{branch_id:t}}});s(e,"Failed to delete branch")},async mergeBranch(t){let e=await r.POST("/v1/branches/{branch_id}/merge",{params:{path:{branch_id:t}},body:{}});s(e,"Failed to merge branch")},async resetBranch(t,e){let{migration_version:a}=B.parse(e),n=await r.POST("/v1/branches/{branch_id}/reset",{params:{path:{branch_id:t}},body:{migration_version:a}});s(n,"Failed to reset branch")},async rebaseBranch(t){let e=await r.POST("/v1/branches/{branch_id}/push",{params:{path:{branch_id:t}},body:{}});s(e,"Failed to rebase branch")}},storage:{async listAllBuckets(t){let e=await r.GET("/v1/projects/{ref}/storage/buckets",{params:{path:{ref:t}}});return s(e,"Failed to list storage buckets"),e.data},async getStorageConfig(t){let e=await r.GET("/v1/projects/{ref}/config/storage",{params:{path:{ref:t}}});return s(e,"Failed to get storage config"),e.data},async updateStorageConfig(t,e){let a=await r.PATCH("/v1/projects/{ref}/config/storage",{params:{path:{ref:t}},body:{fileSizeLimit:e.fileSizeLimit,features:{imageTransformation:{enabled:e.features.imageTransformation.enabled},s3Protocol:{enabled:e.features.s3Protocol.enabled}}}});return s(a,"Failed to update storage config"),a.data}}}}function Q(p){switch(p){case"api.supabase.com":return"supabase.co";case"api.supabase.green":return"supabase.green";default:return"supabase.red"}}export{le as a};
//# sourceMappingURL=chunk-2TRITCWB.js.map